import deep from 'deep-diff';
import nested from 'nested-property';

function isPlainObj() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return args.every(function (d) {
    if (!d) return false;
    var prototype = Object.getPrototypeOf(d);
    return Object.prototype.toString.call(d).slice(8, -1) === 'Object' && (prototype === null || prototype === Object.getPrototypeOf({}));
  });
}
function isArray() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  return args.every(function (d) {
    return Array.isArray(d);
  });
}
function isNumber() {
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }
  return args.every(function (d) {
    return typeof d === 'number';
  });
}
function treeChanges(data, nextData) {
  return {
    changed: function changed(key) {
      var left = nested.get(data, key);
      var right = nested.get(nextData, key);
      if (isArray(left, right) || isPlainObj(left, right)) {
        var diff = deep.diff(left, right);
        return !!diff;
      }
      return left !== right;
    },
    changedFrom: function changedFrom(key, previous, actual) {
      var useActual = typeof previous !== 'undefined' && typeof actual !== 'undefined';
      var left = nested.get(data, key);
      var right = nested.get(nextData, key);
      var leftComparator = Array.isArray(previous) ? previous.includes(left) : left === previous;
      var rightComparator = Array.isArray(actual) ? actual.includes(right) : right === actual;
      return leftComparator && (useActual ? rightComparator : !useActual);
    },
    changedTo: function changedTo(key, actual) {
      var left = nested.get(data, key);
      var right = nested.get(nextData, key);
      var leftComparator = Array.isArray(actual) ? !actual.includes(left) : left !== actual;
      var rightComparator = Array.isArray(actual) ? actual.includes(right) : right === actual;
      return leftComparator && rightComparator;
    },
    increased: function increased(key) {
      return isNumber(nested.get(data, key), nested.get(nextData, key)) && nested.get(data, key) < nested.get(nextData, key);
    },
    decreased: function decreased(key) {
      return isNumber(nested.get(data, key), nested.get(nextData, key)) && nested.get(data, key) > nested.get(nextData, key);
    }
  };
}

export default treeChanges;
